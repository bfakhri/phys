----
4) Maybe we're using the wrong moments of inertia. We may need the moments for the shape about an axis other than its own
	- Maybe use the parallel axis theorem to calculate different types of moments
5) Implement physics functions
6) Figure out a way to toggle settings like worldWrap elegantly 
	- Make advanceSim() function have a ton of parameters for everything. 
		That will be our gateway to the simulator parameters
7) Protect certain physics functions from approaching zero and divide by zero conditions
7) Add color/texture properties to the Shape class, which will be reflected when they are drawn
8) Add a timing scheme to coordinate the physics engine with the rendering engine
8) Protect loops from integer overflow by changing all ints to specifically sized ints (uint16_t etc)
9) Check math of physics functions

Longer Term
- Maybe make the physics able to function backwards too? 
- Maybe add sound? 3D sound of collisions? 
- Make a wiki/better documentation page
- Add inputs to the world by the user: I was thinking an object with accelerometer/magnetometer/orientationMeter 
	could act as an input and a "virtual" version of the object in the engine which can interact with the 
	world's objects
